# rows at the top
else if ( (list_data[[i]] %>% head(3) %>% mutate(countna = rowSums(is.na(.))) %>% pull(countna))[1] == 27 ) {
f <- f %>%
# get rid of empty columns
select(-`...2`, -`...4`, -`...6`, -`...9`,
-`Court Compliance`, -`...18`, -`...24`) %>%
# add col with sums of NAs, for filtering
mutate(countna = rowSums(is.na(.))) %>%
# get rid of the first 3 columns (which all have 20 NAs)
filter(countna != 20)%>%
# get rid of the countna column
select(-countna) %>%
# use janitor package to make first row rownames
row_to_names(row_number = 1) %>%
# use janitor to make date columns actually dates
mutate(`ARREST DATE` = convert_to_date(`ARREST DATE`),
`BOOK DATE` = convert_to_date(`BOOK DATE`),
#             `DATE OF BIRTH` = convert_to_date(`DATE OF BIRTH`),
`RELEASE DATE` = convert_to_date(`RELEASE DATE`)) %>%
# clean column names
clean_names() %>%
# booking_no column is character here, but numeric for the first filetype
mutate(booking_no = as.numeric(booking_no),
arrest_time = as.numeric(arrest_time),
book_time = as.numeric(book_time),
rlse_time = as.numeric(rlse_time)) %>%
# add date column
mutate(snapshot_date = date)
# now that it's in the format we want, append to output dataframe
final <- final %>% bind_rows(f)
}
# if it's not in one of the two formats from above, then supposedly we know for
# sure that it's the third format. If that's truly the case, we don't need
# to test for it, and could just say else{}
#
# I'm going to go ahead and be thorough and test for it
#
# we know that column 1 is booking no & column 2 is "...2" so test for that:
else if ( (names(list_data[[i]])[1] == "BOOKING NO." & names(list_data[[i]])[2] == "...2") ) {
f <- f %>%
# remove columns where all rows are NA
select(where(function(x) any(!is.na(x)))) %>%
# clean column names
clean_names() %>%
# add date column:
mutate(snapshot_date = date)
final <- final %>% bind_rows(f)
}
# if none of these criteria are met, there's a problem, and we should know about it
else {
print(paste("oops! problem with ", file_names[i]))
}
}
View(final)
rlang::last_trace()
View(f)
library(tidyverse)
library(readxl)
library(janitor)
# create a list of df
# change based on local environment
local_path <- "/Users/micahclarkmoody/Desktop/monitoring_data/subset_98/"
file_names <- list.files(path = local_path)
path_names <- paste(local_path, file_names, sep = "")
# import df in a list
list_data <- lapply(path_names, function(x) read_excel(paste0(path = x)))
# initialize an empty data frame for adding onto
final <- tibble()
################################################################################
################################################################################
# alright, now we do the thing! loop over all files to clean & put them together
################################################################################
################################################################################
for (i in 1:length(list_data)) {
##############################################################################
# set filename and date for loop
##############################################################################
f <- list_data[[i]]
date <- as.Date(substr(file_names[i], 1, 10))
if (ncol(f) == 20) { # if there are 20 columns, then it's already in the format we want
# since it's already in the format we want, we just need to clean names and
# add the date column which we already extracted from the file name
f <- f %>%
# clean column names
clean_names() %>%
# add snapshot date
mutate(snapshot_date = date)
# now that it's in the format we want, append to output dataframe
final <- final %>% bind_rows(f)
}
# if it's not the above format, look for the next format:
# if the first row has 27 NAs in it, then we know it's the format with 3 blank
# rows at the top
else if ( (list_data[[i]] %>% head(3) %>% mutate(countna = rowSums(is.na(.))) %>% pull(countna))[1] == 27 ) {
f <- f %>%
# get rid of empty columns
select(-`...2`, -`...4`, -`...6`, -`...9`,
-`Court Compliance`, -`...18`, -`...24`) %>%
# add col with sums of NAs, for filtering
mutate(countna = rowSums(is.na(.))) %>%
# get rid of the first 3 columns (which all have 20 NAs)
filter(countna != 20)%>%
# get rid of the countna column
select(-countna) %>%
# use janitor package to make first row rownames
row_to_names(row_number = 1) %>%
# use janitor to make date columns actually dates
mutate(`ARREST DATE` = convert_to_date(`ARREST DATE`),
`BOOK DATE` = convert_to_date(`BOOK DATE`),
`DATE OF BIRTH` = convert_to_date(`DATE OF BIRTH`),
`RELEASE DATE` = convert_to_date(`RELEASE DATE`)) %>%
# clean column names
clean_names() %>%
# booking_no column is character here, but numeric for the first filetype
mutate(booking_no = as.numeric(booking_no),
arrest_time = as.numeric(arrest_time),
book_time = as.numeric(book_time),
rlse_time = as.numeric(rlse_time)) %>%
# add date column
mutate(snapshot_date = date)
# now that it's in the format we want, append to output dataframe
final <- final %>% bind_rows(f)
}
# if it's not in one of the two formats from above, then supposedly we know for
# sure that it's the third format. If that's truly the case, we don't need
# to test for it, and could just say else{}
#
# I'm going to go ahead and be thorough and test for it
#
# we know that column 1 is booking no & column 2 is "...2" so test for that:
else if ( (names(list_data[[i]])[1] == "BOOKING NO." & names(list_data[[i]])[2] == "...2") ) {
f <- f %>%
# remove columns where all rows are NA
select(where(function(x) any(!is.na(x)))) %>%
# clean column names
clean_names() %>%
# add date column:
mutate(snapshot_date = date)
final <- final %>% bind_rows(f)
}
# if none of these criteria are met, there's a problem, and we should know about it
else {
print(paste("oops! problem with ", file_names[i]))
}
}
rlang::last_trace()
View(list_data)
rlang::last_trace()
View(final)
View(final)
library(tidyverse)
library(readxl)
library(janitor)
# create a list of df
# change based on local environment
local_path <- "/Users/micahclarkmoody/Desktop/monitoring_data/subset_98/"
file_names <- list.files(path = local_path)
path_names <- paste(local_path, file_names, sep = "")
# import df in a list
list_data <- lapply(path_names, function(x) read_excel(paste0(path = x)))
# initialize an empty data frame for adding onto
final <- tibble()
################################################################################
################################################################################
# alright, now we do the thing! loop over all files to clean & put them together
################################################################################
################################################################################
for (i in 1:length(list_data)) {
##############################################################################
# set filename and date for loop
##############################################################################
f <- list_data[[i]]
date <- as.Date(substr(file_names[i], 1, 10))
if (ncol(f) == 20) { # if there are 20 columns, then it's already in the format we want
# since it's already in the format we want, we just need to clean names and
# add the date column which we already extracted from the file name
f <- f %>%
# clean column names
clean_names() %>%
# add snapshot date
mutate(snapshot_date = date)
# now that it's in the format we want, append to output dataframe
final <- final %>% bind_rows(f)
}
# if it's not the above format, look for the next format:
# if the first row has 27 NAs in it, then we know it's the format with 3 blank
# rows at the top
else if ( (list_data[[i]] %>% head(3) %>% mutate(countna = rowSums(is.na(.))) %>% pull(countna))[1] == 27 ) {
f <- f %>%
# get rid of empty columns
select(-`...2`, -`...4`, -`...6`, -`...9`,
-`Court Compliance`, -`...18`, -`...24`) %>%
# add col with sums of NAs, for filtering
mutate(countna = rowSums(is.na(.))) %>%
# get rid of the first 3 columns (which all have 20 NAs)
filter(countna != 20)%>%
# get rid of the countna column
select(-countna) %>%
# use janitor package to make first row rownames
row_to_names(row_number = 1) %>%
# use janitor to make date columns actually dates
mutate(`ARREST DATE` = convert_to_date(`ARREST DATE`),
`BOOK DATE` = convert_to_date(`BOOK DATE`),
`DATE OF BIRTH` = convert_to_date(`DATE OF BIRTH`),
`RELEASE DATE` = convert_to_date(`RELEASE DATE`)) %>%
# clean column names
clean_names() %>%
# booking_no column is character here, but numeric for the first filetype
mutate(booking_no = as.numeric(booking_no),
arrest_time = as.numeric(arrest_time),
book_time = as.numeric(book_time),
rlse_time = as.numeric(rlse_time)) %>%
# add date column
mutate(snapshot_date = date)
# now that it's in the format we want, append to output dataframe
final <- final %>% bind_rows(f)
}
# if it's not in one of the two formats from above, then supposedly we know for
# sure that it's the third format. If that's truly the case, we don't need
# to test for it, and could just say else{}
#
# I'm going to go ahead and be thorough and test for it
#
# we know that column 1 is booking no & column 2 is "...2" so test for that:
else if ( (names(list_data[[i]])[1] == "BOOKING NO." & names(list_data[[i]])[2] == "...2") ) {
f <- f %>%
# remove columns where all rows are NA
select(where(function(x) any(!is.na(x)))) %>%
# clean column names
clean_names() %>%
# add date column:
mutate(snapshot_date = date)
final <- final %>% bind_rows(f)
}
# if none of these criteria are met, there's a problem, and we should know about it
else {
print(paste("oops! problem with ", file_names[i]))
}
}
rlang::last_trace()
View(f)
View(f)
library(tidyverse)
library(readxl)
library(janitor)
# create a list of df
# change based on local environment
local_path <- "/Users/micahclarkmoody/Desktop/monitoring_data/subset_98/"
file_names <- list.files(path = local_path)
path_names <- paste(local_path, file_names, sep = "")
# import df in a list
list_data <- lapply(path_names, function(x) read_excel(paste0(path = x)))
# initialize an empty data frame for adding onto
final <- tibble()
################################################################################
################################################################################
# alright, now we do the thing! loop over all files to clean & put them together
################################################################################
################################################################################
for (i in 1:length(list_data)) {
##############################################################################
# set filename and date for loop
##############################################################################
f <- list_data[[i]]
date <- as.Date(substr(file_names[i], 1, 10))
if (ncol(f) == 20) { # if there are 20 columns, then it's already in the format we want
# since it's already in the format we want, we just need to clean names and
# add the date column which we already extracted from the file name
f <- f %>%
# clean column names
clean_names() %>%
# add snapshot date
mutate(snapshot_date = date)
# now that it's in the format we want, append to output dataframe
final <- final %>% bind_rows(f)
}
# if it's not the above format, look for the next format:
# if the first row has 27 NAs in it, then we know it's the format with 3 blank
# rows at the top
else if ( (list_data[[i]] %>% head(3) %>% mutate(countna = rowSums(is.na(.))) %>% pull(countna))[1] == 27 ) {
f <- f %>%
# get rid of empty columns
select(-`...2`, -`...4`, -`...6`, -`...9`,
-`Court Compliance`, -`...18`, -`...24`) %>%
# add col with sums of NAs, for filtering
mutate(countna = rowSums(is.na(.))) %>%
# get rid of the first 3 columns (which all have 20 NAs)
filter(countna != 20)%>%
# get rid of the countna column
select(-countna) %>%
# use janitor package to make first row rownames
row_to_names(row_number = 1) %>%
# use janitor to make date columns actually dates
mutate(`ARREST DATE` = convert_to_date(`ARREST DATE`),
`BOOK DATE` = convert_to_date(`BOOK DATE`),
#             `DATE OF BIRTH` = convert_to_date(`DATE OF BIRTH`),
`RELEASE DATE` = convert_to_date(`RELEASE DATE`)) %>%
# clean column names
clean_names() %>%
# booking_no column is character here, but numeric for the first filetype
mutate(booking_no = as.numeric(booking_no),
arrest_time = as.numeric(arrest_time),
book_time = as.numeric(book_time),
rlse_time = as.numeric(rlse_time)) %>%
# add date column
mutate(snapshot_date = date)
# now that it's in the format we want, append to output dataframe
final <- final %>% bind_rows(f)
}
# if it's not in one of the two formats from above, then supposedly we know for
# sure that it's the third format. If that's truly the case, we don't need
# to test for it, and could just say else{}
#
# I'm going to go ahead and be thorough and test for it
#
# we know that column 1 is booking no & column 2 is "...2" so test for that:
else if ( (names(list_data[[i]])[1] == "BOOKING NO." & names(list_data[[i]])[2] == "...2") ) {
f <- f %>%
# remove columns where all rows are NA
select(where(function(x) any(!is.na(x)))) %>%
# clean column names
clean_names() %>%
# add date column:
mutate(snapshot_date = date)
final <- final %>% bind_rows(f)
}
# if none of these criteria are met, there's a problem, and we should know about it
else {
print(paste("oops! problem with ", file_names[i]))
}
}
rlang::last_trace()
library(tidyverse)
library(readxl)
library(janitor)
# create a list of df
# change based on local environment
local_path <- "/Users/micahclarkmoody/Desktop/monitoring_data/subset_98/"
file_names <- list.files(path = local_path)
path_names <- paste(local_path, file_names, sep = "")
# import df in a list
list_data <- lapply(path_names, function(x) read_excel(paste0(path = x)))
# initialize an empty data frame for adding onto
final <- tibble()
################################################################################
################################################################################
# alright, now we do the thing! loop over all files to clean & put them together
################################################################################
################################################################################
for (i in 1:length(list_data)) {
##############################################################################
# set filename and date for loop
##############################################################################
f <- list_data[[i]]
date <- as.Date(substr(file_names[i], 1, 10))
if (ncol(f) == 20) { # if there are 20 columns, then it's already in the format we want
# since it's already in the format we want, we just need to clean names and
# add the date column which we already extracted from the file name
f <- f %>%
# clean column names
clean_names() %>%
# add snapshot date
mutate(snapshot_date = date)
# now that it's in the format we want, append to output dataframe
final <- final %>% bind_rows(f)
}
# if it's not the above format, look for the next format:
# if the first row has 27 NAs in it, then we know it's the format with 3 blank
# rows at the top
else if ( (list_data[[i]] %>% head(3) %>% mutate(countna = rowSums(is.na(.))) %>% pull(countna))[1] == 27 ) {
f <- f %>%
# get rid of empty columns
select(-`...2`, -`...4`, -`...6`, -`...9`,
-`Court Compliance`, -`...18`, -`...24`) %>%
# add col with sums of NAs, for filtering
mutate(countna = rowSums(is.na(.))) %>%
# get rid of the first 3 columns (which all have 20 NAs)
filter(countna != 20)%>%
# get rid of the countna column
select(-countna) %>%
# use janitor package to make first row rownames
row_to_names(row_number = 1) %>%
# use janitor to make date columns actually dates
mutate(`ARREST DATE` = excel_numeric_to_date(`ARREST DATE`),
`BOOK DATE` = excel_numeric_to_date(`BOOK DATE`),
`DATE OF BIRTH` = excel_numeric_to_date(`DATE OF BIRTH`),
`RELEASE DATE` = excel_numeric_to_date(`RELEASE DATE`)) %>%
# clean column names
clean_names() %>%
# booking_no column is character here, but numeric for the first filetype
mutate(booking_no = as.numeric(booking_no),
arrest_time = as.numeric(arrest_time),
book_time = as.numeric(book_time),
rlse_time = as.numeric(rlse_time)) %>%
# add date column
mutate(snapshot_date = date)
# now that it's in the format we want, append to output dataframe
final <- final %>% bind_rows(f)
}
# if it's not in one of the two formats from above, then supposedly we know for
# sure that it's the third format. If that's truly the case, we don't need
# to test for it, and could just say else{}
#
# I'm going to go ahead and be thorough and test for it
#
# we know that column 1 is booking no & column 2 is "...2" so test for that:
else if ( (names(list_data[[i]])[1] == "BOOKING NO." & names(list_data[[i]])[2] == "...2") ) {
f <- f %>%
# remove columns where all rows are NA
select(where(function(x) any(!is.na(x)))) %>%
# clean column names
clean_names() %>%
# add date column:
mutate(snapshot_date = date)
final <- final %>% bind_rows(f)
}
# if none of these criteria are met, there's a problem, and we should know about it
else {
print(paste("oops! problem with ", file_names[i]))
}
}
library(tidyverse)
library(readxl)
library(janitor)
# create a list of df
# change based on local environment
local_path <- "/Users/micahclarkmoody/Desktop/monitoring_data/subset_98/"
file_names <- list.files(path = local_path)
path_names <- paste(local_path, file_names, sep = "")
# import df in a list
list_data <- lapply(path_names, function(x) read_excel(paste0(path = x)))
# initialize an empty data frame for adding onto
final <- tibble()
################################################################################
################################################################################
# alright, now we do the thing! loop over all files to clean & put them together
################################################################################
################################################################################
for (i in 1:length(list_data)) {
##############################################################################
# set filename and date for loop
##############################################################################
f <- list_data[[i]]
date <- as.Date(substr(file_names[i], 1, 10))
if (ncol(f) == 20) { # if there are 20 columns, then it's already in the format we want
# since it's already in the format we want, we just need to clean names and
# add the date column which we already extracted from the file name
f <- f %>%
# clean column names
clean_names() %>%
# add snapshot date
mutate(snapshot_date = date)
# now that it's in the format we want, append to output dataframe
final <- final %>% bind_rows(f)
}
# if it's not the above format, look for the next format:
# if the first row has 27 NAs in it, then we know it's the format with 3 blank
# rows at the top
else if ( (list_data[[i]] %>% head(3) %>% mutate(countna = rowSums(is.na(.))) %>% pull(countna))[1] == 27 ) {
f <- f %>%
# get rid of empty columns
select(-`...2`, -`...4`, -`...6`, -`...9`,
-`Court Compliance`, -`...18`, -`...24`) %>%
# add col with sums of NAs, for filtering
mutate(countna = rowSums(is.na(.))) %>%
# get rid of the first 3 columns (which all have 20 NAs)
filter(countna != 20)%>%
# get rid of the countna column
select(-countna) %>%
# use janitor package to make first row rownames
row_to_names(row_number = 1) %>%
# use janitor to make date columns actually dates
mutate(`ARREST DATE` = excel_numeric_to_date(`ARREST DATE`),
`BOOK DATE` = excel_numeric_to_date(`BOOK DATE`),
`DATE OF BIRTH` = excel_numeric_to_date(`DATE OF BIRTH`),
`RELEASE DATE` = excel_numeric_to_date(`RELEASE DATE`)) %>%
# clean column names
clean_names() %>%
# booking_no column is character here, but numeric for the first filetype
mutate(booking_no = as.numeric(booking_no),
arrest_time = as.numeric(arrest_time),
book_time = as.numeric(book_time),
rlse_time = as.numeric(rlse_time)) %>%
# add date column
mutate(snapshot_date = date)
# now that it's in the format we want, append to output dataframe
final <- final %>% bind_rows(f)
}
# if it's not in one of the two formats from above, then supposedly we know for
# sure that it's the third format. If that's truly the case, we don't need
# to test for it, and could just say else{}
#
# I'm going to go ahead and be thorough and test for it
#
# we know that column 1 is booking no & column 2 is "...2" so test for that:
else if ( (names(list_data[[i]])[1] == "BOOKING NO." & names(list_data[[i]])[2] == "...2") ) {
f <- f %>%
# remove columns where all rows are NA
select(where(function(x) any(!is.na(x)))) %>%
# clean column names
clean_names() %>%
# add date column:
mutate(snapshot_date = date)
final <- final %>% bind_rows(f)
}
# if none of these criteria are met, there's a problem, and we should know about it
else {
print(paste("oops! problem with ", file_names[i]))
}
}
View(final)
View(f)
